{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","handleWords","wordArr","count","i","length","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","window","confirm","document","getElementById","select","navigator","clipboard","writeText","split","join","s","charAt","handleCharacters","Alert","alert","role","word","lower","slice","capitalise","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.60844f3b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li> */}\r\n       \r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n  <input className=\"form-check-input\" onClick = {props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes ={\r\n    title: PropTypes.string.isRequired ,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps ={\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n    \r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick= ()=>{\r\n        // console.log(\"Uppercase was clicked \" +text);\r\n        let newText= text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Uppercase is Enabled\", \"success\");\r\n\r\n    }\r\n    const handleLowClick= ()=>{\r\n        // console.log(\"Uppercase was clicked \" +text);\r\n        let newText= text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Lowercase is Enabled\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On change\");\r\n        setText(event.target.value)\r\n\r\n    }\r\n\r\n    const handleClearClick=()=>{\r\n      \r\n      let a=window.confirm('Are you sure you want to Clear the text');\r\n      if(a===true){\r\n\r\n      let newText2 = '';\r\n      setText(newText2);\r\n      props.showAlert(\"Text Cleared\", \"success\");\r\n     }\r\n\r\n\r\n\r\n    }\r\n\r\n   const handleCopyClick=()=>{\r\n     let newText = document.getElementById(\"myBox\");\r\n     \r\n\r\n       newText.select();\r\n       navigator.clipboard.writeText(newText.value);\r\n       props.showAlert(\"Text Copied to Clipboard \", \"success\");\r\n     \r\n     \r\n      \r\n\r\n\r\n   }   \r\n   \r\n   const handleExtraClick=()=>{\r\n     let newText = text.split(/[ ]+/);\r\n     setText(newText.join(\" \"));\r\n     props.showAlert(\"Extra Spaces Removed\", \"success\");\r\n\r\n   }\r\n   const handleCharacters=(s)=>{\r\n    \r\n    // console.log(s , s.length);\r\n     let count=0;\r\n    for(let i=0;i<s.length;i++){\r\n      if(s.charAt(i)!==\" \"){\r\n        count= count+1;\r\n      }\r\n      else{\r\n        continue;\r\n      }\r\n    }\r\n    return count;\r\n   }\r\n   const handleWords=(wordArr)=>{\r\n    \r\n    // console.log(wordArr , wordArr.length);\r\n     let count=0;\r\n    for(let i=0;i<wordArr.length;i++){\r\n      if(wordArr[i]!==\"\"){\r\n        count= count+1;\r\n      }\r\n      else{\r\n        continue;\r\n      }\r\n    }\r\n    return count;\r\n   }\r\n   \r\n\r\n    const [text, setText] = useState('Enter text here');\r\n \r\n    \r\n\r\n  \r\n    \r\n  return (\r\n      <>\r\n    <div className=\"container\" style={{color: props.mode==='dark'?'white':'black' }}>\r\n      <h1>{props.heading} </h1>\r\n      <div className=\"mb-3\" style={{color: props.mode==='dark'?'white':'black' }}>\r\n<textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#343a40':'white' , color: props.mode==='dark'?'white':'black'  }} rows ='9' id=\"myBox\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-warning\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n      <button className=\"btn btn-warning mx-2\" onClick={handleLowClick}>Convert To Lowercase</button>\r\n      <button className=\"btn btn-warning \" onClick={handleClearClick}>Clear Text </button>\r\n      <button className=\"btn btn-warning mx-2 \" onClick={handleCopyClick}>Copy Text </button>\r\n      {/* <button className=\"btn btn-warning \" onClick={handleItalicClick}>{btnText} </button> */}\r\n      <button className=\"btn btn-warning \" onClick={handleExtraClick}> Remove Exra Spaces </button>\r\n    </div>\r\n    <div className=\"container\" style={{color: props.mode==='dark'?'white':'black' }}>\r\n        <h2>Your text summary</h2>\r\n        <p>{handleWords(text.split(\" \"))} words and {handleCharacters(text)} characters </p>\r\n        <p>{0.008 * handleWords(text.split(\" \")) } Minutes Read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something to Preview here\"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalise =(word)=>{\r\n        const lower= word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        \r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalise(props.alert.type)}</strong> : {props.alert.msg}\r\n            </div>\r\n            \r\n    \r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light'); //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1400);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#343a40';\n      showAlert(\"Dark mode is Enabled\", \"success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode is Enabled\", \"success\");\n\n\n    }\n  }\n  return (\n\n\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\"/> */}\n      {/* <Navbar /> */}\n      {/* <Router> */}\n\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch> */}\n          {/* <Route exact path=\"/about\"> */}\n            {/* <About mode={mode} /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm heading=\"Enter the text to analyze\" mode={mode} showAlert={showAlert} />\n          {/* </Route> */}\n\n\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}